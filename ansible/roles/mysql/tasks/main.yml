---
- name: Install mariadb
  apt:
    name:
      - mariadb-server
      - mariadb-client
  become: true

- name: Comment out bind address (use skip-networking default)
  replace:
    path: /etc/mysql/mariadb.conf.d/50-server.cnf
    regexp: ^bind-address
    replace: '#bind-address'
  become: true

- name: Install pymysql, cryptography
  pip:
    name:
      - PyMySQL<1
      - cryptography<3.4
  become: true

- name: Create root my.cnf
  template:
    src: my.cnf.root.j2
    dest: /etc/mysql/conf.d/root.cnf
    owner: root
    group: root
    mode: '0600'
  become: true

- name: Enable the service
  service:
    name: mysqld
    enabled: true
    state: started
  become: true

- name: set db root user password
  mysql_user:
    login_password: '{{ mysql_root_password }}'
    name: root
    password: '{{ mysql_root_password }}'
    host: localhost
    check_implicit_admin: true
    login_unix_socket: /run/mysqld/mysqld.sock
  become: true

- name: Create database
  mysql_db:
    login_user: root
    login_password: '{{ mysql_root_password }}'
    name: '{{ p10k_db_name }}'

- name: Create p10k users
  mysql_user:
    login_user: root
    login_password: '{{ mysql_root_password }}'
    name: '{{ p10k_db_user }}'
    password: '{{ p10k_db_password }}'
    host: '{{ item }}'
    priv: '{{ p10k_db_name }}.*:ALL'
  loop: '{{ app_servers }}'

- name: Create the user for monit to ping the mysql server
  mysql_user:
    login_user: root
    login_password: '{{ mysql_root_password }}'
    name: '{{ mysql_monit.user_name }}'
    password: '{{ mysql_monit.password }}'
    host: localhost
  notify:
    - restart mysql

- name: Create backup script
  template:
    src: backup-db.j2
    dest: /usr/local/sbin/backup-db
    owner: root
    group: root
    mode: '0700'
  become: true

- name: Set backup script to run on cron
  cron:
    cron_file: db_backup
    name: db_backup
    minute: 33
    hour: 1
    day: '*'
    month: '*'
    weekday: '*'
    job: /usr/local/sbin/backup-db
    user: root
  become: true

- name: Set cron mailto
  cronvar:
    cron_file: db_backup
    name: MAILTO
    value: '{{ sysadmin_email }}'
  become: true

- meta: flush_handlers
